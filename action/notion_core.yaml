openapi: 3.1.0
info: { title: Notion API (Custom GPT Action), version: 1.0.2 }
servers: [{ url: https://api.notion.com/v1 }]
security: [ { notionAuth: [] } ]

components:
  securitySchemes:
    notionAuth: { type: http, scheme: bearer, bearerFormat: NotionIntegrationToken }
  schemas:
    Page: { type: object, properties: {}, additionalProperties: true }
    Database: { type: object, properties: {}, additionalProperties: true }
    ListResponse:
      type: object
      properties:
        object: { type: string, enum: [list] }
        results:
          type: array
          items: { type: object, additionalProperties: true }
        next_cursor: { type: string, nullable: true }
        has_more: { type: boolean }
      additionalProperties: true
    PageCreate: { type: object, properties: {}, additionalProperties: true }
    PageUpdate: { type: object, properties: {}, additionalProperties: true }
    DatabaseQuery: { type: object, properties: {}, additionalProperties: true }
    SearchRequest: { type: object, properties: {}, additionalProperties: true }

paths:
  /pages/{page_id}:
    get:
      operationId: getPage
      summary: Retrieve a page
      parameters:
        - in: path
          name: page_id
          required: true
          schema: { type: string }
        - in: header
          name: Notion-Version
          required: true
          schema: { type: string, example: "2022-06-28" }
      responses:
        "200":
          description: ok
          content: { application/json: { schema: { $ref: "#/components/schemas/Page" } } }
    patch:
      operationId: updatePage
      summary: Update a page
      parameters:
        - in: path
          name: page_id
          required: true
          schema: { type: string }
        - in: header
          name: Notion-Version
          required: true
          schema: { type: string, example: "2022-06-28" }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: "#/components/schemas/PageUpdate" } } }
      responses:
        "200":
          description: ok
          content: { application/json: { schema: { $ref: "#/components/schemas/Page" } } }

  /pages:
    post:
      operationId: createPage
      summary: Create a page
      parameters:
        - in: header
          name: Notion-Version
          required: true
          schema: { type: string, example: "2022-06-28" }
      requestBody:
        required: true
        content: { application/json: { schema: { $ref: "#/components/schemas/PageCreate" } } }
      responses:
        "200":
          description: ok
          content: { application/json: { schema: { $ref: "#/components/schemas/Page" } } }

  /databases/{database_id}:
    get:
      operationId: getDatabase
      summary: Retrieve a database
      parameters:
        - in: path
          name: database_id
          required: true
          schema: { type: string }
        - in: header
          name: Notion-Version
          required: true
          schema: { type: string, example: "2022-06-28" }
      responses:
        "200":
          description: ok
          content: { application/json: { schema: { $ref: "#/components/schemas/Database" } } }

  /databases/{database_id}/query:
    post:
      operationId: queryDatabase
      summary: Query a database
      parameters:
        - in: path
          name: database_id
          required: true
          schema: { type: string }
        - in: header
          name: Notion-Version
          required: true
          schema: { type: string, example: "2022-06-28" }
      requestBody:
        required: false
        content: { application/json: { schema: { $ref: "#/components/schemas/DatabaseQuery" } } }
      responses:
        "200":
          description: ok
          content: { application/json: { schema: { $ref: "#/components/schemas/ListResponse" } } }

  /search:
    post:
      operationId: search
      summary: Search pages and databases
      parameters:
        - in: header
          name: Notion-Version
          required: true
          schema: { type: string, example: "2022-06-28" }
      requestBody:
        required: false
        content: { application/json: { schema: { $ref: "#/components/schemas/SearchRequest" } } }
      responses:
        "200":
          description: ok
          content: { application/json: { schema: { $ref: "#/components/schemas/ListResponse" } } }

  /blocks/{block_id}/children:
    get:
      operationId: getPageOrBlockChildrenContent
      summary: List children of a block
      parameters:
        - in: path
          name: block_id
          required: true
          schema: { type: string }
        - in: header
          name: Notion-Version
          required: true
          schema: { type: string, example: "2022-06-28" }
        - in: query
          name: start_cursor
          required: false
          schema: { type: string }
        - in: query
          name: page_size
          required: false
          schema: { type: integer, minimum: 1, maximum: 100, default: 100 }
      responses:
        "200":
          description: ok
          content: { application/json: { schema: { $ref: "#/components/schemas/ListResponse" } } }
    patch:
      operationId: appendBlockChildren
      summary: Append children to a block
      parameters:
        - in: path
          name: block_id
          required: true
          schema: { type: string }
        - in: header
          name: Notion-Version
          required: true
          schema: { type: string, example: "2022-06-28" }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                children:
                  type: array
                  items: { type: object, additionalProperties: true }
                after: { type: string }
              required: [children]
      responses:
        "200":
          description: ok
          content: { application/json: { schema: { $ref: "#/components/schemas/ListResponse" } } }
